{"version":3,"file":"layout.js","sources":["../nxtx.ts","../src/layout.ts"],"sourcesContent":["export interface Node {\r\n    type: NodeType,\r\n    value?: any,\r\n    name?: string,\r\n    args?: Array<Node>\r\n}\r\nexport enum NodeType {\r\n    Paragraph = 1,\r\n    Command,\r\n    Text,\r\n    Block,\r\n    Html,\r\n    Node,\r\n    Dictionary = 11,\r\n    Array,\r\n    Number,\r\n    String\r\n}\r\n\r\nexport interface ArgumentCheck {\r\n    expected: NodeType,\r\n    actual: NodeType,\r\n    index: number\r\n}\r\nexport interface ArgumentCheckResult {\r\n    ok: boolean,\r\n    invalid: Array<ArgumentCheck>\r\n}\r\n\r\ntype CommandResultTypes = Node | HTMLElement | Text | undefined | void\r\ntype CommandResultType = Promise<CommandResultTypes> | CommandResultTypes\r\nexport type CommandResult = Array<CommandResultType> | CommandResultType\r\nexport type CommandFunction = (...args:Array<Node>) => CommandResult\r\n\r\nexport interface Package {\r\n    name: string,\r\n    requires?: Array<string>,\r\n    commands?: { [name:string]: CommandFunction },\r\n    preprocessors?: { [name:string]: CommandFunction },\r\n    hooks?: { prerender?:()=>void, midrender?:()=>void, postrender?:()=>void }\r\n}\r\n\r\nexport type RenderEvent = 'prerender'|'midrender'|'postrender'\r\n\r\nexport interface INxtx {\r\n    registerCommand: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\r\n    registerPreprocessor: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\r\n    verifyArguments: (types:Array<NodeType>, ...args:Array<Node>) => ArgumentCheckResult\r\n    registerPackage: (pkg:Package) => void\r\n\r\n    parse: (code:string) => Array<Node>\r\n    render: (code:string, root:HTMLElement) => Promise<void>\r\n\r\n    text: (content:string) => Text\r\n    htmlLite: (nodeName:string, attributes:object, ...children:Array<HTMLElement|string>) => HTMLElement\r\n    html: (nodeName:string, attributes:object, ...children:Array<Promise<HTMLElement|Node|string>|HTMLElement|Node|string>) => Promise<HTMLElement>\r\n\r\n    on: (event:RenderEvent, handler:()=>void) => void\r\n    off: (event:RenderEvent, handler:()=>void) => void\r\n}","/*  Layout package for nxtx\n    Author: Thomas Gwynfryn McCollin\n    License: MIT */\n\nimport {NodeType, Package, INxtx} from '../nxtx';\ndeclare const nxtx: INxtx;\n\nconst style = document.createElement(\"style\");\nstyle.id = 'layout-style-block';\ndocument.head.appendChild(style);\nconst sheet = <CSSStyleSheet> style.sheet;\n\nconst parse = argNode => {\n    if (argNode.type !== NodeType.Number) return argNode.value;\n    return argNode.value + 'mm';\n};\n\nconst replaceRule = (newRule, ruleIndex)=> {\n    if (sheet.deleteRule) sheet.deleteRule(ruleIndex);\n    else if (sheet.removeRule) sheet.removeRule(ruleIndex);\n    sheet.insertRule(newRule, ruleIndex);\n};\n\nconst marginFormatters = {\n    all: value => { replaceRule(`.sheet { padding: ${value} }`, 1) },\n    left: value => { replaceRule(`.sheet { padding-left: ${value} }`, 1) },\n    top: value => { replaceRule(`.sheet { padding-top: ${value} }`, 1) },\n    right: value => { replaceRule(`.sheet { padding-right: ${value} }`, 1) },\n    bottom: value => { replaceRule(`.sheet { padding-bottom: ${value} }`, 1) },\n    vertical: value => { replaceRule(`.sheet { padding-top: ${value}; padding-bottom: ${value} }`, 1) },\n    horizontal: value => { replaceRule(`.sheet { padding-left: ${value}; padding-right: ${value} }`, 1) },\n\n    'head-separator': value => { sheet.insertRule(`header { margin-bottom: ${value}`, 2) },\n    'foot-skip': value => { sheet.insertRule(`footer { margin-top: ${value}`, 3) },\n};\n\n// Default\nsheet.insertRule('@page { size: A4 }', 0);\nsheet.insertRule(`.sheet { padding: 2cm }`, 1);\nsheet.insertRule('header { height: 3cm }', 2);\nsheet.insertRule('footer { height: 3cm }', 3);\n\nconst pkg : Package = {\n    name: 'layout',\n    commands: {\n        'set-paper-size': paperSizeNode => replaceRule(`@page { size: ${paperSizeNode} }`, 0),\n        'set-header': heightNode => replaceRule(`header {height: ${heightNode}mm`, 2),\n        'set-footer': heightNode => replaceRule(`footer {height: ${heightNode}mm`, 3)\n    },\n    preprocessors: {\n        'set-margin': dictNode => Object.keys(dictNode.value).forEach(key => marginFormatters[key](parse(dictNode.value[key])))\n    }\n};\n\nif (nxtx) nxtx.registerPackage(pkg);\n\nexport default pkg;"],"names":["NodeType","style","document","createElement","id","head","appendChild","sheet","replaceRule","newRule","ruleIndex","deleteRule","removeRule","insertRule","marginFormatters","all","value","left","top","right","bottom","vertical","horizontal","head-separator","foot-skip","pkg","name","commands","set-paper-size","paperSizeNode","set-header","heightNode","set-footer","preprocessors","set-margin","dictNode","Object","keys","forEach","key","argNode","type","Number","nxtx","registerPackage"],"mappings":"mCAMA,IAAYA,GAAZ,SAAYA,GACRA,6BACAA,yBACAA,mBACAA,qBACAA,mBACAA,mBACAA,gCACAA,sBACAA,wBACAA,wBAVJ,CAAYA,IAAAA,OCCZ,IAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,GAAK,qBACXF,SAASG,KAAKC,YAAYL,GAC1B,IAAMM,EAAwBN,EAAMM,MAO9BC,EAAc,SAACC,EAASC,GACtBH,EAAMI,WAAYJ,EAAMI,WAAWD,GAC9BH,EAAMK,YAAYL,EAAMK,WAAWF,GAC5CH,EAAMM,WAAWJ,EAASC,IAGxBI,EAAmB,CACrBC,IAAK,SAAAC,GAAWR,EAAY,qBAAqBQ,OAAW,IAC5DC,KAAM,SAAAD,GAAWR,EAAY,0BAA0BQ,OAAW,IAClEE,IAAK,SAAAF,GAAWR,EAAY,yBAAyBQ,OAAW,IAChEG,MAAO,SAAAH,GAAWR,EAAY,2BAA2BQ,OAAW,IACpEI,OAAQ,SAAAJ,GAAWR,EAAY,4BAA4BQ,OAAW,IACtEK,SAAU,SAAAL,GAAWR,EAAY,yBAAyBQ,uBAA0BA,OAAW,IAC/FM,WAAY,SAAAN,GAAWR,EAAY,0BAA0BQ,sBAAyBA,OAAW,IAEjGO,iBAAkB,SAAAP,GAAWT,EAAMM,WAAW,2BAA2BG,EAAS,IAClFQ,YAAa,SAAAR,GAAWT,EAAMM,WAAW,wBAAwBG,EAAS,KAI9ET,EAAMM,WAAW,qBAAsB,GACvCN,EAAMM,WAAW,0BAA2B,GAC5CN,EAAMM,WAAW,yBAA0B,GAC3CN,EAAMM,WAAW,yBAA0B,GAE3C,IAAMY,EAAgB,CAClBC,KAAM,SACNC,SAAU,CACNC,iBAAkB,SAAAC,GAAiB,OAAArB,EAAY,iBAAiBqB,OAAmB,IACnFC,aAAc,SAAAC,GAAc,OAAAvB,EAAY,mBAAmBuB,OAAgB,IAC3EC,aAAc,SAAAD,GAAc,OAAAvB,EAAY,mBAAmBuB,OAAgB,KAE/EE,cAAe,CACXC,aAAc,SAAAC,GAAY,OAAAC,OAAOC,KAAKF,EAASnB,OAAOsB,QAAQ,SAAAC,GAAO,OAAAzB,EAAiByB,IAtChFC,EAsC2FL,EAASnB,MAAMuB,IArCxGE,OAASzC,EAAS0C,OAAeF,EAAQxB,MAC9CwB,EAAQxB,MAAQ,MAFb,IAAAwB,cA0CVG,MAAMA,KAAKC,gBAAgBnB"}